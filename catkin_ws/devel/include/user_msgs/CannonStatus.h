// Generated by gencpp from file user_msgs/CannonStatus.msg
// DO NOT EDIT!


#ifndef USER_MSGS_MESSAGE_CANNONSTATUS_H
#define USER_MSGS_MESSAGE_CANNONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace user_msgs
{
template <class ContainerAllocator>
struct CannonStatus_
{
  typedef CannonStatus_<ContainerAllocator> Type;

  CannonStatus_()
    : bullet_num(0)
    , capacity(0)
    , reload_time(0.0)
    , rdy2fire(false)  {
    }
  CannonStatus_(const ContainerAllocator& _alloc)
    : bullet_num(0)
    , capacity(0)
    , reload_time(0.0)
    , rdy2fire(false)  {
  (void)_alloc;
    }



   typedef uint8_t _bullet_num_type;
  _bullet_num_type bullet_num;

   typedef uint8_t _capacity_type;
  _capacity_type capacity;

   typedef float _reload_time_type;
  _reload_time_type reload_time;

   typedef uint8_t _rdy2fire_type;
  _rdy2fire_type rdy2fire;





  typedef boost::shared_ptr< ::user_msgs::CannonStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_msgs::CannonStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CannonStatus_

typedef ::user_msgs::CannonStatus_<std::allocator<void> > CannonStatus;

typedef boost::shared_ptr< ::user_msgs::CannonStatus > CannonStatusPtr;
typedef boost::shared_ptr< ::user_msgs::CannonStatus const> CannonStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_msgs::CannonStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_msgs::CannonStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_msgs::CannonStatus_<ContainerAllocator1> & lhs, const ::user_msgs::CannonStatus_<ContainerAllocator2> & rhs)
{
  return lhs.bullet_num == rhs.bullet_num &&
    lhs.capacity == rhs.capacity &&
    lhs.reload_time == rhs.reload_time &&
    lhs.rdy2fire == rhs.rdy2fire;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_msgs::CannonStatus_<ContainerAllocator1> & lhs, const ::user_msgs::CannonStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_msgs::CannonStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_msgs::CannonStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::CannonStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::CannonStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::CannonStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::CannonStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_msgs::CannonStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e31433468f551973da97c9147997bd00";
  }

  static const char* value(const ::user_msgs::CannonStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe31433468f551973ULL;
  static const uint64_t static_value2 = 0xda97c9147997bd00ULL;
};

template<class ContainerAllocator>
struct DataType< ::user_msgs::CannonStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_msgs/CannonStatus";
  }

  static const char* value(const ::user_msgs::CannonStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_msgs::CannonStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bullet_num\n"
"\n"
"uint8 capacity\n"
"float32 reload_time\n"
"\n"
"bool rdy2fire\n"
;
  }

  static const char* value(const ::user_msgs::CannonStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_msgs::CannonStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bullet_num);
      stream.next(m.capacity);
      stream.next(m.reload_time);
      stream.next(m.rdy2fire);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CannonStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_msgs::CannonStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_msgs::CannonStatus_<ContainerAllocator>& v)
  {
    s << indent << "bullet_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bullet_num);
    s << indent << "capacity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.capacity);
    s << indent << "reload_time: ";
    Printer<float>::stream(s, indent + "  ", v.reload_time);
    s << indent << "rdy2fire: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rdy2fire);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MSGS_MESSAGE_CANNONSTATUS_H
