// Generated by gencpp from file user_msgs/ExitCondition.msg
// DO NOT EDIT!


#ifndef USER_MSGS_MESSAGE_EXITCONDITION_H
#define USER_MSGS_MESSAGE_EXITCONDITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace user_msgs
{
template <class ContainerAllocator>
struct ExitCondition_
{
  typedef ExitCondition_<ContainerAllocator> Type;

  ExitCondition_()
    : exit_l(0.0)
    , exit_a(0.0)
    , arrive_cnt(0)  {
    }
  ExitCondition_(const ContainerAllocator& _alloc)
    : exit_l(0.0)
    , exit_a(0.0)
    , arrive_cnt(0)  {
  (void)_alloc;
    }



   typedef double _exit_l_type;
  _exit_l_type exit_l;

   typedef double _exit_a_type;
  _exit_a_type exit_a;

   typedef uint8_t _arrive_cnt_type;
  _arrive_cnt_type arrive_cnt;





  typedef boost::shared_ptr< ::user_msgs::ExitCondition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_msgs::ExitCondition_<ContainerAllocator> const> ConstPtr;

}; // struct ExitCondition_

typedef ::user_msgs::ExitCondition_<std::allocator<void> > ExitCondition;

typedef boost::shared_ptr< ::user_msgs::ExitCondition > ExitConditionPtr;
typedef boost::shared_ptr< ::user_msgs::ExitCondition const> ExitConditionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_msgs::ExitCondition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_msgs::ExitCondition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_msgs::ExitCondition_<ContainerAllocator1> & lhs, const ::user_msgs::ExitCondition_<ContainerAllocator2> & rhs)
{
  return lhs.exit_l == rhs.exit_l &&
    lhs.exit_a == rhs.exit_a &&
    lhs.arrive_cnt == rhs.arrive_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_msgs::ExitCondition_<ContainerAllocator1> & lhs, const ::user_msgs::ExitCondition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ExitCondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ExitCondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ExitCondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ExitCondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ExitCondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ExitCondition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_msgs::ExitCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7aec7e7f502d48d3f927e4aa6e30673c";
  }

  static const char* value(const ::user_msgs::ExitCondition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7aec7e7f502d48d3ULL;
  static const uint64_t static_value2 = 0xf927e4aa6e30673cULL;
};

template<class ContainerAllocator>
struct DataType< ::user_msgs::ExitCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_msgs/ExitCondition";
  }

  static const char* value(const ::user_msgs::ExitCondition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_msgs::ExitCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 exit_l  # m\n"
"float64 exit_a  # Â°\n"
"uint8 arrive_cnt\n"
;
  }

  static const char* value(const ::user_msgs::ExitCondition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_msgs::ExitCondition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exit_l);
      stream.next(m.exit_a);
      stream.next(m.arrive_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExitCondition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_msgs::ExitCondition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_msgs::ExitCondition_<ContainerAllocator>& v)
  {
    s << indent << "exit_l: ";
    Printer<double>::stream(s, indent + "  ", v.exit_l);
    s << indent << "exit_a: ";
    Printer<double>::stream(s, indent + "  ", v.exit_a);
    s << indent << "arrive_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrive_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MSGS_MESSAGE_EXITCONDITION_H
