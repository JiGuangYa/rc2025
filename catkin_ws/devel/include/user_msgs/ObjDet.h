// Generated by gencpp from file user_msgs/ObjDet.msg
// DO NOT EDIT!


#ifndef USER_MSGS_MESSAGE_OBJDET_H
#define USER_MSGS_MESSAGE_OBJDET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <user_msgs/ObjBbox.h>
#include <geometry_msgs/Pose.h>

namespace user_msgs
{
template <class ContainerAllocator>
struct ObjDet_
{
  typedef ObjDet_<ContainerAllocator> Type;

  ObjDet_()
    : index(0)
    , class_id(0)
    , label()
    , score(0.0)
    , bbox()
    , pose()  {
    }
  ObjDet_(const ContainerAllocator& _alloc)
    : index(0)
    , class_id(0)
    , label(_alloc)
    , score(0.0)
    , bbox(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _index_type;
  _index_type index;

   typedef uint8_t _class_id_type;
  _class_id_type class_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef double _score_type;
  _score_type score;

   typedef  ::user_msgs::ObjBbox_<ContainerAllocator>  _bbox_type;
  _bbox_type bbox;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::user_msgs::ObjDet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_msgs::ObjDet_<ContainerAllocator> const> ConstPtr;

}; // struct ObjDet_

typedef ::user_msgs::ObjDet_<std::allocator<void> > ObjDet;

typedef boost::shared_ptr< ::user_msgs::ObjDet > ObjDetPtr;
typedef boost::shared_ptr< ::user_msgs::ObjDet const> ObjDetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_msgs::ObjDet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_msgs::ObjDet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_msgs::ObjDet_<ContainerAllocator1> & lhs, const ::user_msgs::ObjDet_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.class_id == rhs.class_id &&
    lhs.label == rhs.label &&
    lhs.score == rhs.score &&
    lhs.bbox == rhs.bbox &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_msgs::ObjDet_<ContainerAllocator1> & lhs, const ::user_msgs::ObjDet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ObjDet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ObjDet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ObjDet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ObjDet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ObjDet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ObjDet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_msgs::ObjDet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38284f8c06edb8f35a2f0a300b2226fc";
  }

  static const char* value(const ::user_msgs::ObjDet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38284f8c06edb8f3ULL;
  static const uint64_t static_value2 = 0x5a2f0a300b2226fcULL;
};

template<class ContainerAllocator>
struct DataType< ::user_msgs::ObjDet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_msgs/ObjDet";
  }

  static const char* value(const ::user_msgs::ObjDet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_msgs::ObjDet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 index\n"
"\n"
"uint8 class_id\n"
"\n"
"string label\n"
"\n"
"float64 score\n"
"\n"
"ObjBbox bbox\n"
"\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: user_msgs/ObjBbox\n"
"float64 x1\n"
"float64 y1\n"
"float64 x2\n"
"float64 y2\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 w\n"
"float64 h\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::user_msgs::ObjDet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_msgs::ObjDet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.class_id);
      stream.next(m.label);
      stream.next(m.score);
      stream.next(m.bbox);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjDet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_msgs::ObjDet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_msgs::ObjDet_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.index);
    s << indent << "class_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "bbox: ";
    s << std::endl;
    Printer< ::user_msgs::ObjBbox_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MSGS_MESSAGE_OBJDET_H
