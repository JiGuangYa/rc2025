// Generated by gencpp from file user_msgs/CarCmd.msg
// DO NOT EDIT!


#ifndef USER_MSGS_MESSAGE_CARCMD_H
#define USER_MSGS_MESSAGE_CARCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace user_msgs
{
template <class ContainerAllocator>
struct CarCmd_
{
  typedef CarCmd_<ContainerAllocator> Type;

  CarCmd_()
    : cmd(0)  {
    }
  CarCmd_(const ContainerAllocator& _alloc)
    : cmd(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type;
  _cmd_type cmd;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HOLD)
  #undef HOLD
#endif
#if defined(_WIN32) && defined(REMOTE)
  #undef REMOTE
#endif
#if defined(_WIN32) && defined(NAVIGATION)
  #undef NAVIGATION
#endif
#if defined(_WIN32) && defined(ARRIVE)
  #undef ARRIVE
#endif

  enum {
    HOLD = 0u,
    REMOTE = 1u,
    NAVIGATION = 2u,
    ARRIVE = 3u,
  };


  typedef boost::shared_ptr< ::user_msgs::CarCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_msgs::CarCmd_<ContainerAllocator> const> ConstPtr;

}; // struct CarCmd_

typedef ::user_msgs::CarCmd_<std::allocator<void> > CarCmd;

typedef boost::shared_ptr< ::user_msgs::CarCmd > CarCmdPtr;
typedef boost::shared_ptr< ::user_msgs::CarCmd const> CarCmdConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_msgs::CarCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_msgs::CarCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_msgs::CarCmd_<ContainerAllocator1> & lhs, const ::user_msgs::CarCmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_msgs::CarCmd_<ContainerAllocator1> & lhs, const ::user_msgs::CarCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_msgs::CarCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_msgs::CarCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::CarCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::CarCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::CarCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::CarCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_msgs::CarCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ce4d776e578234f635535a4932fa551";
  }

  static const char* value(const ::user_msgs::CarCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ce4d776e578234fULL;
  static const uint64_t static_value2 = 0x635535a4932fa551ULL;
};

template<class ContainerAllocator>
struct DataType< ::user_msgs::CarCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_msgs/CarCmd";
  }

  static const char* value(const ::user_msgs::CarCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_msgs::CarCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 cmd\n"
"\n"
"\n"
"# enum cmd\n"
"uint8 HOLD=0\n"
"uint8 REMOTE=1\n"
"uint8 NAVIGATION=2\n"
"uint8 ARRIVE=3\n"
"\n"
;
  }

  static const char* value(const ::user_msgs::CarCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_msgs::CarCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_msgs::CarCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_msgs::CarCmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MSGS_MESSAGE_CARCMD_H
