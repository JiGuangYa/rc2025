// Generated by gencpp from file user_msgs/ObjBbox.msg
// DO NOT EDIT!


#ifndef USER_MSGS_MESSAGE_OBJBBOX_H
#define USER_MSGS_MESSAGE_OBJBBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace user_msgs
{
template <class ContainerAllocator>
struct ObjBbox_
{
  typedef ObjBbox_<ContainerAllocator> Type;

  ObjBbox_()
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)  {
    }
  ObjBbox_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)  {
  (void)_alloc;
    }



   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _w_type;
  _w_type w;

   typedef double _h_type;
  _h_type h;





  typedef boost::shared_ptr< ::user_msgs::ObjBbox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_msgs::ObjBbox_<ContainerAllocator> const> ConstPtr;

}; // struct ObjBbox_

typedef ::user_msgs::ObjBbox_<std::allocator<void> > ObjBbox;

typedef boost::shared_ptr< ::user_msgs::ObjBbox > ObjBboxPtr;
typedef boost::shared_ptr< ::user_msgs::ObjBbox const> ObjBboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_msgs::ObjBbox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_msgs::ObjBbox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_msgs::ObjBbox_<ContainerAllocator1> & lhs, const ::user_msgs::ObjBbox_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_msgs::ObjBbox_<ContainerAllocator1> & lhs, const ::user_msgs::ObjBbox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ObjBbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ObjBbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ObjBbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ObjBbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ObjBbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ObjBbox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_msgs::ObjBbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b22ade4cc14991942fc8b80a66289fb7";
  }

  static const char* value(const ::user_msgs::ObjBbox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb22ade4cc1499194ULL;
  static const uint64_t static_value2 = 0x2fc8b80a66289fb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::user_msgs::ObjBbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_msgs/ObjBbox";
  }

  static const char* value(const ::user_msgs::ObjBbox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_msgs::ObjBbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x1\n"
"float64 y1\n"
"float64 x2\n"
"float64 y2\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 w\n"
"float64 h\n"
;
  }

  static const char* value(const ::user_msgs::ObjBbox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_msgs::ObjBbox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjBbox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_msgs::ObjBbox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_msgs::ObjBbox_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MSGS_MESSAGE_OBJBBOX_H
