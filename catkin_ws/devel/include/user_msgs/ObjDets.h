// Generated by gencpp from file user_msgs/ObjDets.msg
// DO NOT EDIT!


#ifndef USER_MSGS_MESSAGE_OBJDETS_H
#define USER_MSGS_MESSAGE_OBJDETS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <user_msgs/ObjDet.h>

namespace user_msgs
{
template <class ContainerAllocator>
struct ObjDets_
{
  typedef ObjDets_<ContainerAllocator> Type;

  ObjDets_()
    : header()
    , fps(0)
    , num(0)
    , dets()  {
    }
  ObjDets_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fps(0)
    , num(0)
    , dets(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _fps_type;
  _fps_type fps;

   typedef int16_t _num_type;
  _num_type num;

   typedef std::vector< ::user_msgs::ObjDet_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::user_msgs::ObjDet_<ContainerAllocator> >> _dets_type;
  _dets_type dets;





  typedef boost::shared_ptr< ::user_msgs::ObjDets_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_msgs::ObjDets_<ContainerAllocator> const> ConstPtr;

}; // struct ObjDets_

typedef ::user_msgs::ObjDets_<std::allocator<void> > ObjDets;

typedef boost::shared_ptr< ::user_msgs::ObjDets > ObjDetsPtr;
typedef boost::shared_ptr< ::user_msgs::ObjDets const> ObjDetsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_msgs::ObjDets_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_msgs::ObjDets_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_msgs::ObjDets_<ContainerAllocator1> & lhs, const ::user_msgs::ObjDets_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fps == rhs.fps &&
    lhs.num == rhs.num &&
    lhs.dets == rhs.dets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_msgs::ObjDets_<ContainerAllocator1> & lhs, const ::user_msgs::ObjDets_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ObjDets_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_msgs::ObjDets_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ObjDets_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_msgs::ObjDets_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ObjDets_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_msgs::ObjDets_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_msgs::ObjDets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c6e1901031d8b3566cf3e9e9d7037d6";
  }

  static const char* value(const ::user_msgs::ObjDets_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c6e1901031d8b35ULL;
  static const uint64_t static_value2 = 0x66cf3e9e9d7037d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::user_msgs::ObjDets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_msgs/ObjDets";
  }

  static const char* value(const ::user_msgs::ObjDets_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_msgs::ObjDets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int16 fps\n"
"\n"
"int16 num\n"
"\n"
"ObjDet[] dets\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: user_msgs/ObjDet\n"
"uint16 index\n"
"\n"
"uint8 class_id\n"
"\n"
"string label\n"
"\n"
"float64 score\n"
"\n"
"ObjBbox bbox\n"
"\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: user_msgs/ObjBbox\n"
"float64 x1\n"
"float64 y1\n"
"float64 x2\n"
"float64 y2\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 w\n"
"float64 h\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::user_msgs::ObjDets_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_msgs::ObjDets_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fps);
      stream.next(m.num);
      stream.next(m.dets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjDets_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_msgs::ObjDets_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_msgs::ObjDets_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fps: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fps);
    s << indent << "num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.num);
    s << indent << "dets[]" << std::endl;
    for (size_t i = 0; i < v.dets.size(); ++i)
    {
      s << indent << "  dets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::user_msgs::ObjDet_<ContainerAllocator> >::stream(s, indent + "    ", v.dets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MSGS_MESSAGE_OBJDETS_H
